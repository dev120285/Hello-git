package com.shiva.blessing.shiva;

import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.regex.Pattern;



import org.apache.logging.log4j.Logger;
import org.springframework.util.AntPathMatcher;

public class PDJFAuthorizationMappingTest {
	
	
	private static final Pattern VARIABLE_PATTERN = Pattern.compile("\\{[^/]+?\\}");
	public PDJFAuthorizationMappingTest() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	
	public static final Map<String,String> patternConfigMapper = new LinkedHashMap<>();
	public static final String PATH = "/*/home.xhtml" ;

	static{
	patternConfigMapper.put("/**/*", "authenticated");
	patternConfigMapper.put("/**/signLocation.xhtml", "hasAllRoles('pd-jpoc-applicant,pd-jpoc-user') and userAttributes['DISTRICT'] == '04'");
	patternConfigMapper.put("/ecms/ecmsStates.xhtml", "evalConditionCode('ECPRSRCND') and hasNoneRoles('pd-jpoc-applicant,pd-jpoc-user') and (sessionAuthzAttributes['ATTR_AZ_ADR_CREATED'] == true)");
	patternConfigMapper.put("/ecms/ecmsPropertySearch.xhtml", "(remoteAddress == '127.0.0.1') and (calendar.get(calendar.DAY_OF_WEEK) == calendar.THURSDAY)");
	}

	public static void main(String[] args) {

        Map<String, String> unsortMap = patternConfigMapper;
        System.out.println("Unsort Map......");
        printMap(unsortMap);

        System.out.println("\nSorted Map......By Key");
        Map<String, String> treeMap = new TreeMap<String, String>(unsortMap);
        printMap(treeMap);

    }

    //pretty print a map
    public static <K, V> void printMap(Map<K, V> map) {
        for (Map.Entry<K, V> entry : map.entrySet()) {
            System.out.println("Key : " + entry.getKey() 
				+ " Value : " + entry.getValue());
        }
    }

}
	
	/*public static void main (String[] args)
	{
		 Set<String> exprList = new HashSet<String>();
		 AntPathMatcher matcher = new AntPathMatcher();
		
			
			Comparator<String> test = matcher.getPatternComparator(PATH);
			
			Map<String, String> treeMap = new TreeMap<String, String>();
			for (String key : patternConfigMapper.keySet()) {	
			test.compare(key, key);
			}
			System.out.println(test);
		}*/
	
	
	
		




	



	

